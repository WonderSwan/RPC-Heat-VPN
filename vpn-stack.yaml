heat_template_version: 2013-05-23

description: |
  Deploys a VPN concentrator. As of Juno, port-updates need to be done manually to allow for multiple left networks (split tunneling).

parameter_groups:
- parameters:
  - image
  - flavor
  - keyname
  - floating-network-id
  - left-networks
  - vpn-group-name
  - vpn-users
  - neutron-router-UUID
  - transient-subnet-cidr
  - dhcp-pool-cidr


parameters:
  flavor:
    type: string
    label: Flavor
    description: Flavor of the VPN concentrator.
    default: m1.small

  image:
    type: string
    label: Image Name
    description: Name of the existing image to use for every vm spun up by this stack. The image should have heat-config and heat-config-script baked in.

  keyname:
    type: string
    label: vpn-concentrator keyname.
    description: The name of the keypair that should be used to ssh into the VPN concentrator.

  floating-network-id:
    type: string
    label: External Network UUID
    description: UUID of the physical provider network. The private network created by this stack will route to this network. Also, any floating ip's needed by this stack will come this network.
  
  left-networks: 
    type: string
    label: Left networks
    default: ""
    description: The tenant networks to the left of the VPN concentrator. These are the networks accessable by the VPN. May be listed out in a comma delimited form.

  vpn-group-name:
    type: string
    label: Group name prefix
    default: RAXVPN-group
    description: The group name prefix for the VPN concentrator. A random string will follow to avoid naming conflicts

  vpn-users:
    type: string
    label: Users
    default: ""
    description: The users for the VPN concentrator in comma delimited form. Passwords are randomly generated and displayed as outputs at stack completion. An existing user can be deleting by prefixing the list with delete:. The stack will then delete all following usernames from the VPN concentraor. You cannot delete and add a user on the same update.

  neutron-router-UUID:
    type: string
    label: Neutron Router UUID
    description: The router in front of the networks the vpn concentrator will route to. 

  transient-subnet-cidr:
    type: string
    label: Transient network CIDR
    default: 172.29.255.0/24
    description: The network used for VPN traffic being routed to the left networks.

  dhcp-pool-cidr:
    type: string
    label: DHCP pool CIDR
    default: 192.168.238.0/24
    description: The cidr for the DHCP pool of the VPN concentrator.


 

resources:

  # Random string to aid in naming things.
  stack-string:
    type: OS::Heat::RandomString
    properties:
      length: 6
      sequence: lettersdigits

  # Randomly generated Private Shared Key for the VPN concentrator
  private-shared-key:
    type: OS::Heat::RandomString
    properties:
      length: 12
      sequence: lettersdigits

  # Security group for the VPN concentrator port. Allows 
  # all icmp, all ssh, and VPN traffic
  secgroup:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: vpn-secgroup-$stackstr
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value
      description: VPN, ICMP, and SSH traffic allowed
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: udp
        port_range_min: 500
        port_range_max: 500
      - protocol: udp
        port_range_min: 4500
        port_range_max: 4500

  # Private network for the VPN concentrator transient network
  transient-net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: vpn-transient-net-$stackstr
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value

  # Private subnet for this stack
  transient-subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id:
        get_resource: transient-net
      cidr:
        get_param: transient-subnet-cidr
      dns_nameservers:
        - 8.8.8.8
        - 4.2.2.2

  # Router interface
  transient-net-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id:
        get_param: neutron-router-UUID
      subnet_id: 
        get_resource: transient-subnet

  # One floating ip for the vpn concentrator node
  vpn-concentrator-ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 
        get_param: floating-network-id

  # One port for the VPN concentrator node
  vpn-concentrator-port:
    type: OS::Neutron::Port
    properties:
      replacement_policy: AUTO
      network_id: 
        get_resource: transient-net
      security_groups:
        - get_resource: secgroup

  # Updates the route of the neutron router
  neutron-update:
    type: OS::Neutron::ExtraRoute
    properties:
      destination: 
        get_param: dhcp-pool-cidr
      nexthop: 
        get_attr:
          - vpn-concentrator-port
          - fixed_ips
          - 0
          - ip_address
      router_id: 
        get_param: neutron-router-UUID

  # Software configuration script for the salt-standalone node
  # Installs salt-minion, sets permission on some personality files
  # and uses git to clone any provided state/formula repos
  config-vpn-concentrator:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs: 
        - name: state_repos
      config: |
        #!/bin/bash
        # Install salt minion
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-vpn-concentrator
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && exit 0
        
        echo "installing whois.."
        apt-get install whois -y
        echo "Install Salt Minion"
        curl -L http://bootstrap.saltstack.org | sh -s -- git v2014.7.1
        mkdir -p /srv/salt
        mkdir -p /srv/pillar
        mkdir -p /srv/orchestration
        mkdir -p /srv/pillar/
        mkdir -p /srv/pillar/rpc-salt-vpn
        echo -e 'file_roots:\n  base:\n    - /srv/salt' >> /etc/salt/minion
        echo -e 'file_client: local' >> /etc/salt/minion 

        # Clone state/formula repos in state root directory
        cd /srv/salt
        while read -r line
        do
            if [ -n "$line" ]; then
                git clone $line
            fi
        done <<< "$state_repos"

        # Finally - Restart salt service
        service salt-minion restart
        /sbin/ifconfig -a | /usr/bin/awk '/eth.*Ethernet/ {print $1}' | while read E; do /usr/bin/sudo /sbin/dhclient $E; done
        touch ${prefix}.ran

  # Software deployment for vpn-concentrator. Deploys the vpn-concentrator software
  # configuration.
  deploy-vpn-concentrator:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions:
        - CREATE
        - UPDATE
      input_values:
        state_repos: |
          https://github.com/elextro/rpc-salt-vpn
      config:
        get_resource: config-vpn-concentrator
      server:
        get_resource: vpn-concentrator

  config-build-pillar:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: left_networks
        - name: dhcp_pool_cidr
        - name: group_name
        - name: private_key
        - name: list_of_users
        - name: concentrator_port
      outputs:
        - name: users_pwds
        - name: neutron_command
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-build-pillar
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)

        #Building the pillar file
        python /srv/salt/rpc-salt-vpn/scripts/build_pillar.py "$left_networks" "$dhcp_pool_cidr" "$group_name" "$private_key" "$list_of_users" "$concentrator_port" "$deploy_action" "$heat_outputs_path.users_pwds" "$heat_outputs_path.neutron_command" "/srv/pillar/rpc-salt-vpn/init.sls"

  deploy-build-pillar:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy-vpn-concentrator
    properties:
      actions:
        - CREATE
        - UPDATE
      input_values:
        left_networks:
          get_param: left-networks
        dhcp_pool_cidr:
          get_param: dhcp-pool-cidr
        group_name:
          str_replace:
            template: $group_name-$stackstr
            params:
              $stackstr:
                get_attr:
                  - stack-string
                  - value
              $group_name:
                get_param: vpn-group-name
        private_key:
          get_attr: 
            - private-shared-key
            - value
        list_of_users:
          get_param: vpn-users
        concentrator_port:
          get_resource: vpn-concentrator-port
      config:
        get_resource: config-build-pillar
      server:
        get_resource: vpn-concentrator

  # The vpn-concentrator instance
  # Should have one floating ip
  vpn-concentrator:
    type: OS::Nova::Server
    depends_on: transient-net-interface
    properties:
      key_name:
        get_param: keyname
      image: 
        get_param: image
      flavor:
        get_param: flavor
      name:
        str_replace:
          template: vpn-concentrator-$stackstr
          params:
            $stackstr:
              get_attr:
                - stack-string
                - value

      personality:
        #Top file for pillars
        /srv/pillar/top.sls: |
          base:
            '*':
              - rpc-salt-vpn

      # Get access from the vpn-concentrator-port
      networks:
        - port:
            get_resource: vpn-concentrator-port

      # Using SoftwareConfigs - This needs to be set to SOFTWARE_CONFIG
      user_data_format: SOFTWARE_CONFIG

  # Associate the vpn-concentrator floating ip to the vpn-concentrator port
  vpn-concentrator-floating-ip-ass: 
    type: OS::Neutron::FloatingIPAssociation
    properties: 
      floatingip_id:
        get_resource: vpn-concentrator-ip
      port_id:
        get_resource: vpn-concentrator-port

  # Call the salt formula locally to install strongswan
  config-install-strongswan:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: left_networks
        - name: dhcp_pool_cidr
        - name: group_name
        - name: private_key
        - name: list_of_users
        - name: concentrator_port
      group: script
      inputs:
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/config-install-strongswan
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        [ -e ${prefix}.ran ] && [ "$deploy_action" != "UPDATE" ] && exit 0
        echo "Verifying inputs..."
        echo "Left Networks: $left_networks"
        echo "DHCP pool CIDR: $dhcp_pool_cidr"
        echo "Group name: $group_name"
        echo "List of Users: $list_of_users"

        #Calling salt state to install strongswan 5.2.2 from source.
        salt-call state.sls rpc-salt-vpn
        touch ${prefix}.ran
        exit 0

  # The software deployment for the install strongswan config
  deploy-install-strongswan:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions:
        - CREATE
        - UPDATE
      config:
        get_resource: config-install-strongswan
      server:
        get_resource: vpn-concentrator
      signal_transport: NO_SIGNAL
      input_values:
        left_networks:
          get_param: left-networks
        dhcp_pool_cidr:
          get_param: dhcp-pool-cidr
        group_name:
          str_replace:
            template: $group_name-$stackstr
            params:
              $stackstr:
                get_attr:
                  - stack-string
                  - value
              $group_name:
                get_param: vpn-group-name
        private_key:
          get_attr: 
            - private-shared-key
            - value
        list_of_users:
          get_param: vpn-users
        concentrator_port:
          get_resource: vpn-concentrator-port
    depends_on:
      - deploy-vpn-concentrator
      - deploy-build-pillar

  # This resource is a dummy resource to wait for strongswan
  # to be installed by source. 
  installing-strongswan-config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/bash
        set -ex
        logdir=/var/log/heat-deployments
        prefix=${logdir}/installing-strongswan-config
        mkdir -p $logdir
        exec &> >(tee -a ${prefix}.log)
        while [ ! -f /tmp/install-strongswan.ran ]
        do
          echo "Waiting for strongswan to be installed.."
          sleep 2
        done
        echo "Done!"
        exit 0

  installing-strongswan-deploy:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: installing-strongswan-config
      server:
        get_resource: vpn-concentrator
    depends_on:
      - deploy-install-strongswan
      - deploy-build-pillar

outputs:
  vpn-concentrator-floating-ip:
    description: Saltstack vpn-concentrator floating ip
    value: 
      get_attr:
        - vpn-concentrator-ip
        - floating_ip_address


  full-group-name:
    description: The group name as the VPN concentrator has configured it. 
    value:
      str_replace:
        template: $group_name-$stackstr
        params:
          $stackstr:
            get_attr:
              - stack-string
              - value
          $group_name:
            get_param: vpn-group-name

  neutron-port-command:
    description: Copy and paste this command into your neutron client. This allows the concentrator to route traffic from remote client to local subnets. Must include DHCP pool and local subnets
    value:
      get_attr:
        - deploy-build-pillar
        - neutron_command

  users_pwds:
    description: The users and their corresponding passwords are listed as key-value pairs below
    value:
      get_attr:
        - deploy-build-pillar
        - users_pwds

  private-shared-key-output:
    description: The PSK of the VPN Server
    value:
      get_attr:
        - private-shared-key
        - value

  # Uncomment the stdout's and stderr's if problems are occuring.
  #vpn-concentrator-stdout:
  #  value:
  #    get_attr:
  #     - deploy-vpn-concentrator
  #     - deploy_stdout
  #vpn-concentrator-stderr:
  #  value:
  #    get_attr:
  #      - deploy-vpn-concentrator
  #      - deploy_stderr
